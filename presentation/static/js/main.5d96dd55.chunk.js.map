{"version":3,"sources":["theme/theme-default.js","App.js","serviceWorker.js","index.js"],"names":["theme","colors","primary","secondary","fonts","header","fontSizes","h1","h2","h3","bodyCopy","size","maxCodePaneHeight","template","justifyContent","position","bottom","width","padding","image","capCodeBlock","indentNormalizer","capReactBlock","engineCodeBlock","engineReaBlock","App","transitionEffect","backgroundColor","backgroundImage","backgroundOpacity","height","flexDirection","margin","fontSize","elementNum","src","gridTemplateColumns","gridColumnGap","href","gridTemplateRows","defaultValue","values","value","step","highlightStart","highlightEnd","language","autoFillHeight","left","right","bg","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d96dd55.chunk.js","sourcesContent":["export let theme = {\r\n  colors: {\r\n    primary: \"white\",\r\n    secondary: \"#26a0a7\",\r\n  },\r\n  fonts: {\r\n    header: '\"Helvetica Neue\", Helvetica, Arial, sans-serif',\r\n  },\r\n  fontSizes: {\r\n    h1: \"82px\",\r\n    h2: \"64px\",\r\n    h3: \"52px\",\r\n    bodyCopy: \"28px\",\r\n  },\r\n  size: {\r\n    maxCodePaneHeight: 480,\r\n  },\r\n};\r\n","import React from \"react\";\nimport { theme } from \"./theme/theme-default\";\n\nimport {\n  Appear,\n  Box,\n  CodePane,\n  CodeSpan,\n  Deck,\n  FlexBox,\n  FullScreen,\n  Grid,\n  Heading,\n  Image,\n  ListItem,\n  Markdown,\n  Notes,\n  OrderedList,\n  Progress,\n  Slide,\n  Stepper,\n  Text,\n  Link,\n  UnorderedList,\n  indentNormalizer,\n} from \"spectacle\";\n\nconst template = () => (\n  <FlexBox\n    justifyContent=\"space-between\"\n    position=\"absolute\"\n    bottom={0}\n    width={1}\n  >\n    <Box padding=\"0 1em\">\n      <FullScreen />\n    </Box>\n    <Box padding=\"1em\">\n      <Progress />\n    </Box>\n  </FlexBox>\n);\n\nconst image = {\n  pic: \"url(./img/pic.jpg)\",\n  confused: \"./img/confused.png\",\n  devHub: \"./img/CreateMashup.png\",\n  mash: \"./img/Mashup.png\",\n  url: \"./img/url.jpg\",\n  qID: \"./img/ID.jpg\",\n};\n\nconst capCodeBlock = indentNormalizer(`\nconst appId = \"<id>\" /// eg. Cars.qvf ;\n\nlet config = {\n  host: \"localhost\", /// eg. or your url\n  prefix: \"/\", // eg. \"/abc/\" forQSE\n  port: \"4848\", // eg. \"443\" for QSE\n  isSecure: window.location.protocol === \"https:\"\n};\n\nconst URL_BASE =  \n  (config.isSecure ? \"https://\" : \"http://\") +\n  config.host +\n  (config.port ? \":\" + config.port : \"\") +\n  config.prefix +\n  \"resources\";\n\nrequire.config({\n  baseUrl: URL_BASE, /// provided above\n  paths: {\n    \"js/qlik\": URL_BASE + \"/js/qlik\",\n  },\n  config: {\n    text: {\n      useXhr() {\n        return true;\n      },\n      createXhr: function () {\n        const Xhr = new XMLHttpRequest();\n        Xhr.withCredentials = true;\n        return Xhr;\n      },\n    },\n  },\n});\n\nrequire([\"js/qlik\"], function (qlik) {\n  var app = qlik.openApp(appId, config);\n\n  ///---- works in QSE and dev-hub\n  qlik.theme.apply(\"themeDark\").then(function (result) {});\n\n  app.getObject(\"barchart\",\"EjmXZVz\")\n  \n});\n\n\n///----------------  Add to the index.html file\n<link rel=\"stylesheet\" href=\"<your url eg. localhost:4848>/resources/autogenerated/qlik-styles.css\">\n<script src=\"<your url eg. localhost:4848>/resources/assets/external/requirejs/require.js\"></script>\n<script src=\"<location><scriptname>.js\"></script>\n`);\n\nconst capReactBlock = indentNormalizer(`\n//------- qApp.js\nlet allResources;\n\nconst resources = async () => {\n  if (allResources) {\n    await allResources;\n    return;\n  }\n\n  const SCRIPT = document.createElement(\"script\");\n  SCRIPT.type = \"text/javascript\";\n  SCRIPT.src = URL_BASE + \"/assets/external/requirejs/require.js\";\n  document.head.appendChild(SCRIPT);\n  SCRIPT.loaded = new Promise((resolved) => (SCRIPT.onload = () => resolved()));\n\n  const LINK = document.createElement(\"link\");\n  LINK.rel = \"stylesheet\";\n  LINK.href = URL_BASE + \"/autogenerated/qlik-styles.css\";\n  document.head.appendChild(LINK);\n  LINK.loaded = new Promise((resolved) => {\n    LINK.onload = () => resolved();\n  });\n\n  allResources = Promise.all([SCRIPT.loaded, LINK.loaded]);\n  await allResources;\n};\n\nconst qApp = async () => {\n  await resources();\n\n  window.require.config({\n    baseUrl: URL_BASE,\n    paths: {\n      \"js/qlik\": URL_BASE + \"/js/qlik\",\n    },\n    config: {\n      text: {\n        useXhr() {\n          return true;\n        },\n        createXhr: function () {\n          const Xhr = new XMLHttpRequest();\n          Xhr.withCredentials = true;\n          return Xhr;\n        },\n      },\n    },\n  });\n\n  return new Promise((resolve) => {\n    window.require([\"js/qlik\"], (qlik) => {\n      let app = qlik.openApp(configEnv.app.id, config);\n\n      resolve(app);\n    });\n  });\n};\n\nexport default qApp;\n\n\n///-------------- App.js \nimport React, { useEffect, useState } from \"react\";\n\nimport qApp from \"./qApp\";\nimport BarChart from \"./components/barchart\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [qlik, setQlik] = useState(); ///Returns a stateful value\n  useEffect(() => { ////run after the render is committed to the screen.\n    const render = async () => {\n      const app = await qApp();\n      setQlik(app);\n    };\n    render();\n  }, []);\n\n  return (\n    <div className=\"main\">\n      <BarChart app={qlik} />\n    </div>\n  );\n};\n\nexport default App;\n\n///-----------------------Bar chart component\nimport React, { useEffect } from \"react\";\n\nconst Barchart = ({ app }) => {\n  useEffect(() => {\n    if (!app) return;\n    app.getObject(\"barchart\", \"EjmXZVz\");\n  }, [app]);\n\n  return <div style={{ height: 300, width: 700 }} id=\"barchart\" />;\n};\n\nexport default Barchart;\n`);\n\nconst engineCodeBlock = indentNormalizer(`\n  (async () => {\n  const data = await (\n    await \n    fetch(\n    \"https://unpkg.com/enigma.js@2.7.0/schemas/12.612.0.json\")\n  ).json();\n\n  const appId = \"<app name>\";\n\n  ///------------------------Integrate to QCS\n  // const appId = \"10b52015-0c1d-461a-a75b-c919b12738df\";\n  // const webIntegrationId = \"EVJqMEB5nT6DAEoMCUdoy2tfNKkE82XF\";\n  // const res = await request(\"/api/v1/csrf-token\", false);\n  // const csrfToken = res.headers.get(\"qlik-csrf-token\");\n\n  // async function request(path, returnJson = true) {\n  //   const res = await fetch(\"https://playbox.eu.qlikcloud.com/path\", {\n  //     mode: \"cors\",\n  //     credentials: \"include\",\n  //     redirect: \"follow\",\n  //     headers: {\n  //       // web integration is sent as a header:\n  //       \"qlik-web-integration-id\": webIntegrationId,\n  //     },\n  //   });\n  //   return returnJson ? res.json() : res;\n  // }\n  //---------------------------------------------------------------\n  picasso.use(picassoQ);\n\n  let config = {\n    schema: data,\n    url: \"ws://localhost:4848/app/<appId>\",\n    ///url: \"wss://<QSC>/app/<appid>\n    //?qlik-web-integration-id=webIntegrationId&qlik-csrf-token=csrfToken\",\n  };\n\n  ///---- HyperCube Def\n  let barDef = {\n    qInfo: {\n      qType: \"Bar Chart\",\n    },\n    qHyperCubeDef: {\n      qDimensions: [\n        {\n          qDef: {\n            qFieldDefs: [\"Country\"],\n            qSortCriterias: [\n              {\n                qSortByAscii: 1, //sort alphabetically ASC\n              },\n            ],\n          },\n        },\n      ],\n      qMeasures: [\n        {\n          qDef: {\n            qDef: \"=Avg(Weight)\",\n          },\n          qSortby: {\n            qSortByNumeric: -1, //sort by value DESC\n          },\n        },\n      ],\n      qInitialDataFetch: [\n        {\n          qTop: 0,\n          qLeft: 0,\n          qWidth: 2,\n          qHeight: 50,\n        },\n      ],\n      qInterColumnSortOrder: [1, 0],\n    },\n  };\n\n  let session = enigma.create(config);\n  session.open().then(function (qlik) {\n    qlik.openDoc(appId).then(function (app) {\n      app.createSessionObject(barDef).then((objModel) => {\n        renderBar(\"barchart\", objModel);\n        objModel.addListener(\"changed\", () => renderBar(\"barchart\", objModel));\n        window.addEventListener(\"resize\", () =>\n          renderBar(\"barchart\", objModel)\n        );\n      });\n    });\n  });\n\n  const renderBar = async (element, model) => {\n    let layout = await model.getLayout();\n    console.log(layout);\n    let chart = picasso({\n      renderer: {\n        prio: [\"svg\"],\n      },\n    }).chart({\n      element: document.getElementById(element),\n    });\n    console.log(chart);\n    console.log(document.getElementById(element));\n    chart.update({\n      data: {\n        key: \"qlik\",\n        type: \"q\",\n        data: layout.qHyperCube,\n      },\n\n      settings: {\n        scales: {\n          y: {\n            data: { field: \"qMeasureInfo/0\" },\n            invert: true,\n            include: [0],\n          },\n          c: {\n            data: { field: \"qMeasureInfo/0\" },\n            type: \"color\",\n          },\n          t: {\n            data: { extract: { field: \"qDimensionInfo/0\" } },\n            padding: 0.3,\n          },\n        },\n        components: [\n          {\n            type: \"axis\",\n            dock: \"left\",\n            scale: \"y\",\n          },\n          {\n            type: \"axis\",\n            dock: \"bottom\",\n            scale: \"t\",\n          },\n          {\n            key: \"bars\",\n            type: \"box\",\n            data: {\n              extract: {\n                field: \"qDimensionInfo/0\",\n                props: {\n                  start: 0,\n                  end: { field: \"qMeasureInfo/0\" },\n                },\n              },\n            },\n            settings: {\n              major: { scale: \"t\" },\n              minor: { scale: \"y\" },\n              box: {\n                fill: { scale: \"c\", ref: \"end\" },\n              },\n            },\n          },\n        ],\n      },\n    });\n  };\n})();`);\n\nconst engineReaBlock = indentNormalizer(`\nimport enigma from \"enigma.js\";\nimport usePromise from \"react-use-promise\";\nimport { configEnv, config } from \"./config\";\nimport BarChart from \"./BarChart\";\n\nconst useGlobal = (session) => usePromise(() => session.open(), [session]);\n\nconst useSessionApp = (global) => {\n  const [sessionApp] = usePromise(async () => {\n    if (!global) return null;\n    const app = await global.openDoc(configEnv.app.id);\n    return app;\n  }, [global]);\n  return sessionApp;\n};\n\nfunction App() {\n  const session = useMemo(() => enigma.create(config), []);\n  const [global] = useGlobal(session);\n  const app = useSessionApp(global);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n      <BarChart app={app} />\n    </div>\n  );\n}\n\nexport default App;\n\n///------Barchart.jsx\nimport React, { useEffect, useRef } from \"react\";\nimport picasso from \"picasso.js\";\nimport picassoQ from \"picasso-plugin-q\";\nimport { useModel, useLayout, usePicasso } from \"hamus.js\";\n\nimport { barDef } from \"./data\";\nimport { settings } from \"./settings\";\n\npicasso.use(picassoQ);\n\nconst BarChart = ({ app }) => {\n  const element = useRef(null);\n  const [barModel] = useModel(app, barDef);\n  const [barLayout] = useLayout(barModel);\n\n  const pic = usePicasso(element, settings, barLayout);\n\n  useEffect(() => {\n    if (!app && !pic) return;\n    console.log(app);\n  }, [app, pic]);\n\n  return <div className=\"barchart\" ref={element} />;\n};\n\nexport default BarChart;\n\n`);\n\nconst colors = {\n  main: \"#26a0a7\",\n  lightbluegrey: \"#4d6474\",\n};\n\nconst App = () => (\n  <Deck theme={theme} template={template} transitionEffect=\"fade\">\n    <Slide\n      transitionEffect=\"fade\"\n      backgroundColor={colors.lightbluegrey}\n      backgroundImage={image.pic}\n      backgroundOpacity=\"0.09\"\n    >\n      <FlexBox height=\"100%\" flexDirection=\"column\">\n        <Heading margin=\"0px\" fontSize=\"h1\">\n          <i>My Journey</i>\n        </Heading>\n        <Heading margin=\"0px\" fontSize=\"h3\">\n          Mashups & Web Apps\n        </Heading>\n        <Text>Ryan Arpe</Text>\n      </FlexBox>\n    </Slide>\n    <Slide\n      transitionEffect=\"slide\"\n      backgroundColor={colors.lightbluegrey}\n      backgroundImage={image.pic}\n      backgroundOpacity=\"0.09\"\n    >\n      <Heading>About Me</Heading>\n      <UnorderedList fontSize={32}>\n        <ListItem>7 years Qlik experience</ListItem>\n        <ListItem>\n          2 Years web experience specifically using the Qlik APIs\n        </ListItem>\n        <ListItem>Currently a Senior Qlik Sense Developer at HSBC</ListItem>\n        <ListItem>Been using vanilla JavaScript, React.js and Svelte</ListItem>\n      </UnorderedList>\n    </Slide>\n    <Slide\n      transitionEffect=\"slide\"\n      backgroundColor={colors.lightbluegrey}\n      backgroundImage={image.pic}\n      backgroundOpacity=\"0.09\"\n    >\n      <Heading>Topic</Heading>\n      <OrderedList fontSize={32}>\n        <Appear>\n          <ListItem>Training with Nick Webster and Websy Academy</ListItem>\n        </Appear>\n        <Appear elementNum={0}>\n          <ListItem>First experience with Mashups</ListItem>\n        </Appear>\n        <Appear elementNum={1}>\n          <ListItem>Created a Web App using JavaScript</ListItem>\n        </Appear>\n        <Appear elementNum={2}>\n          <ListItem>Created a Web App using React.js</ListItem>\n        </Appear>\n        <Appear elementNum={3}>\n          <ListItem>What am I currently using and the future</ListItem>\n        </Appear>\n      </OrderedList>\n    </Slide>\n    <Slide transitionEffect=\"slide\" backgroundColor={colors.lightbluegrey}>\n      <FlexBox height=\"100%\">\n        <Heading>So, where to start....</Heading>\n        <Image src={image.confused} width={500} />\n      </FlexBox>\n    </Slide>\n    <Slide\n      transitionEffect=\"slide\"\n      backgroundColor={colors.lightbluegrey}\n      backgroundImage={image.pic}\n      backgroundOpacity=\"0.09\"\n    >\n      <Heading>Install NodeJS and NPM</Heading>\n      <OrderedList fontSize={32}>\n        <Appear>\n          <ListItem>\n            Navigate to https://nodejs.org/en/download/ - includes NPM\n          </ListItem>\n        </Appear>\n        <Appear elementNum={0}>\n          <ListItem>Verify Installation by going to CMD</ListItem>\n        </Appear>\n        <Appear elementNum={1}>\n          <ListItem>Type node –v and npm -v</ListItem>\n        </Appear>\n        <Appear elementNum={2}>\n          <ListItem>\n            If NPM doesn't work, then add the npm location in the Environment\n            Variables in System Properties\n          </ListItem>\n        </Appear>\n        <Appear elementNum={3}>\n          <ListItem>\n            To use in VSC, press Ctrl+Shift+P and type Select Default Shell -\n            Select Command Prompt\n          </ListItem>\n        </Appear>\n      </OrderedList>\n    </Slide>\n    <Slide\n      transitionEffect=\"slide\"\n      backgroundColor={colors.lightbluegrey}\n      backgroundImage={image.pic}\n      backgroundOpacity=\"0.09\"\n    >\n      <Heading>Mashups vs Web apps</Heading>\n      <Grid gridTemplateColumns=\"1fr 1fr\" gridColumnGap={15}>\n        <UnorderedList fontSize={32}>\n          <Appear>\n            <ListItem>Mashups use the Qlik Capability APIs</ListItem>\n          </Appear>\n          <Appear elementNum={0}>\n            <ListItem>\n              Internal AngularJS and RequireJS interact with the web app\n            </ListItem>\n          </Appear>\n          <Appear elementNum={1}>\n            <ListItem>Embed Qlik native visualization</ListItem>\n          </Appear>\n          <Appear elementNum={2}>\n            <ListItem>\n              <Link\n                fontSize={32}\n                margin={0}\n                href=\"https://help.qlik.com/en-US/sense-developer/June2020/Subsystems/APIs/Content/Sense_ClientAPIs/capability-apis-reference.htm\"\n              >\n                Capability APIs Link\n              </Link>\n            </ListItem>\n          </Appear>\n        </UnorderedList>\n        <UnorderedList fontSize={32}>\n          <Appear elementNum={3}>\n            <ListItem>Web apps use the Engine APIs</ListItem>\n          </Appear>\n          <Appear elementNum={4}>\n            <ListItem>\n              EngimaJS communicates with the Qlik QIX Engine via a WebSocket\n            </ListItem>\n          </Appear>\n          <Appear elementNum={5}>\n            <ListItem>Create any visualization using any framework</ListItem>\n          </Appear>\n          <Appear elementNum={6}>\n            <ListItem>\n              <Link\n                fontSize={32}\n                margin={0}\n                href=\"https://help.qlik.com/en-US/sense-developer/February2019/apis/EngineAPI/index.html\"\n              >\n                Engine APIs Link\n              </Link>\n            </ListItem>\n          </Appear>\n          <Appear elementNum={7}>\n            <ListItem>NebulaJS......use native and any framework 🎉</ListItem>\n          </Appear>\n        </UnorderedList>\n      </Grid>\n    </Slide>\n    <Slide transitionEffect=\"slide\" backgroundColor={colors.lightbluegrey}>\n      <Grid gridTemplateRows=\"1fr\">\n        <Heading>Capabilities - Dev Hub</Heading>\n      </Grid>\n      <Grid\n        gridTemplateRows=\"1fr 1fr\"\n        gridTemplateColumns=\"1fr 1fr\"\n        gridColumnGap={15}\n      >\n        <Image src={image.devHub} width={500} />\n        <Image src={image.mash} width={600} height={500} />\n      </Grid>\n    </Slide>\n    <Slide transitionEffect=\"slide\" backgroundColor={colors.lightbluegrey}>\n      <Heading>Capabilities - JavaScript</Heading>\n      <Stepper\n        defaultValue={[1, 1]}\n        values={[\n          [3, 8],\n          [17, 34],\n          [36, 51],\n          [37, 37],\n          [40, 40],\n          [42, 42],\n          [48, 50],\n        ]}\n      >\n        {(value, step) => (\n          <Grid gridTemplateColumns=\"1fr 1fr\" gridColumnGap={15}>\n            <Box position=\"relative\">\n              <CodePane\n                highlightStart={value[0]}\n                highlightEnd={value[1]}\n                fontSize={18}\n                language=\"cpp\"\n                autoFillHeight={true}\n              >\n                {capCodeBlock}\n              </CodePane>\n\n              <Box\n                position=\"absolute\"\n                bottom=\"0rem\"\n                left=\"0rem\"\n                right=\"0rem\"\n                bg=\"black\"\n              ></Box>\n            </Box>\n            <Box>\n              {step >= -1 && step < 4 && (\n                <UnorderedList fontSize={32}>\n                  <Appear>\n                    <ListItem>\n                      Provide the App ID - \"Name\" Desktop or \"ID\" QSE and QSC\n                    </ListItem>\n                    <Box\n                      bottom=\"0rem\"\n                      left=\"0rem\"\n                      right=\"0rem\"\n                      marginTop=\"10px\"\n                    >\n                      <Image src={image.url} width={500} />\n                    </Box>\n                  </Appear>\n                  <Appear elementNum={0}>\n                    <ListItem>\n                      Define the actual Qlik engine connection\n                    </ListItem>\n                  </Appear>\n                  <Appear elementNum={1}>\n                    <ListItem>\n                      Define where the Qlik Sense client side software should be\n                      loaded from\n                    </ListItem>\n                  </Appear>\n                  <Appear elementNum={2}>\n                    <ListItem>RequireJS is used as a module loader</ListItem>\n                  </Appear>\n                  <Appear elementNum={3}>\n                    <ListItem>Connect to the App</ListItem>\n                  </Appear>\n                </UnorderedList>\n              )}\n              {step > 3 && (\n                <UnorderedList fontSize={32}>\n                  <Appear elementNum={3}>\n                    <ListItem>\n                      Apply a theme - doesn't work using Desktop\n                    </ListItem>\n                  </Appear>\n                  <Appear elementNum={5}>\n                    <ListItem>\n                      Use the id=\"barchart\" in the div tag and the object ID\n                      provided by Qlik Sense by qlik\n                      <Box\n                        bottom=\"0rem\"\n                        left=\"0rem\"\n                        right=\"0rem\"\n                        marginTop=\"10px\"\n                      >\n                        <Image src={image.qID} width={300} />\n                      </Box>\n                    </ListItem>\n                  </Appear>\n                  <Appear elementNum={6}>\n                    <ListItem>Add to the index.html file</ListItem>\n                  </Appear>\n                </UnorderedList>\n              )}\n            </Box>\n          </Grid>\n        )}\n      </Stepper>\n    </Slide>\n    <Slide transitionEffect=\"slide\" backgroundColor={colors.lightbluegrey}>\n      <Heading>Capabilities - ReactJS</Heading>\n      <Stepper\n        defaultValue={[2, 59]}\n        values={[\n          [52, 52],\n          [63, 87],\n          [71, 78],\n          [82, 82],\n          [90, 101],\n          [95, 95],\n        ]}\n      >\n        {(value, step) => (\n          <Grid gridTemplateColumns=\"1fr 1fr\" gridColumnGap={15}>\n            <Box position=\"relative\">\n              <CodePane\n                highlightStart={value[0]}\n                highlightEnd={value[1]}\n                fontSize={18}\n                language=\"cpp\"\n                autoFillHeight={true}\n              >\n                {capReactBlock}\n              </CodePane>\n\n              <Box\n                position=\"absolute\"\n                bottom=\"0rem\"\n                left=\"0rem\"\n                right=\"0rem\"\n                bg=\"black\"\n              ></Box>\n            </Box>\n            <Box>\n              <UnorderedList fontSize={32}>\n                <Appear>\n                  <ListItem>\n                    Similar setup as previous example, but save it in a separate\n                    file eg. qApp.js\n                  </ListItem>\n                </Appear>\n                <Appear elementNum={0}>\n                  <ListItem>\n                    Importing the config.js with ID and config values\n                  </ListItem>\n                </Appear>\n                <Appear elementNum={2}>\n                  <ListItem>Use hooks to connect to the Qlik app</ListItem>\n                </Appear>\n                <Appear elementNum={3}>\n                  <ListItem>\n                    Add the updated state to the Barchart component\n                  </ListItem>\n                </Appear>\n                <Appear elementNum={5}>\n                  <ListItem>Use app to get the object</ListItem>\n                </Appear>\n              </UnorderedList>\n            </Box>\n          </Grid>\n        )}\n      </Stepper>\n    </Slide>\n    <Slide transitionEffect=\"slide\" backgroundColor={colors.lightbluegrey}>\n      <Heading>Engine - JavaScript</Heading>\n      <Stepper\n        defaultValue={[2, 6]}\n        values={[\n          [10, 28],\n          [29, 29],\n          [39, 76],\n          [78, 89],\n          [80, 88],\n          [83, 86],\n          [91, 92],\n          [104, 108],\n          [113, 113],\n          [122, 122],\n        ]}\n      >\n        {(value, step) => (\n          <Grid gridTemplateColumns=\"1fr 1fr\" gridColumnGap={15}>\n            <Box position=\"relative\">\n              <CodePane\n                highlightStart={value[0]}\n                highlightEnd={value[1]}\n                fontSize={18}\n                language=\"cpp\"\n                autoFillHeight={true}\n              >\n                {engineCodeBlock}\n              </CodePane>\n\n              <Box\n                position=\"absolute\"\n                bottom=\"0rem\"\n                left=\"0rem\"\n                right=\"0rem\"\n                bg=\"black\"\n              ></Box>\n            </Box>\n            <Box>\n              {step >= -1 && step < 5 && (\n                <UnorderedList fontSize={32}>\n                  <Appear>\n                    <ListItem>\n                      Fetch data from engima which provides the APIs\n                    </ListItem>\n                  </Appear>\n                  <Appear elementNum={0}>\n                    <ListItem>Code to connect to QSC</ListItem>\n                  </Appear>\n                  <Appear elementNum={1}>\n                    <ListItem>Use Picasso and PicassoQ</ListItem>\n                  </Appear>\n                  <Appear elementNum={2}>\n                    <ListItem>Create a HyperCube</ListItem>\n                  </Appear>\n                  <Appear elementNum={3}>\n                    <ListItem>\n                      Create a session using EngimaJS using the config\n                    </ListItem>\n                  </Appear>\n                  <Appear elementNum={4}>\n                    <ListItem>\n                      Create a Session Object using barDef (hypercubeDef)\n                    </ListItem>\n                  </Appear>\n                </UnorderedList>\n              )}\n              {step > 3 && (\n                <UnorderedList fontSize={32}>\n                  <Appear elementNum={5}>\n                    <ListItem>\n                      Add an Event Lister so it re-renders on resize and on\n                      change\n                    </ListItem>\n                  </Appear>\n                  <Appear elementNum={6}>\n                    <ListItem>\n                      In renderBar function use model to get the layout - data\n                    </ListItem>\n                  </Appear>\n                  <Appear elementNum={7}>\n                    <ListItem>Add the data to Picasso</ListItem>\n                  </Appear>\n                  <Appear elementNum={8}>\n                    <ListItem>Add the standard Picasso</ListItem>\n                  </Appear>\n                  <Appear elementNum={8}>\n                    <ListItem>Add the Dimension and Measure values</ListItem>\n                  </Appear>\n                </UnorderedList>\n              )}\n            </Box>\n          </Grid>\n        )}\n      </Stepper>\n    </Slide>\n    <Slide transitionEffect=\"slide\" backgroundColor={colors.lightbluegrey}>\n      <Heading>Engine - ReactJS</Heading>\n      <Stepper\n        defaultValue={[1, 4]}\n        values={[\n          [6, 7],\n          [8, 15],\n          [18, 21],\n          [25, 25],\n          [33, 37],\n          [36, 36],\n          [45, 49],\n          [50, 54],\n        ]}\n      >\n        {(value, step) => (\n          <Grid gridTemplateColumns=\"1fr 1fr\" gridColumnGap={15}>\n            <Box position=\"relative\">\n              <CodePane\n                highlightStart={value[0]}\n                highlightEnd={value[1]}\n                fontSize={18}\n                language=\"cpp\"\n                autoFillHeight={true}\n              >\n                {engineReaBlock}\n              </CodePane>\n\n              <Box\n                position=\"absolute\"\n                bottom=\"0rem\"\n                left=\"0rem\"\n                right=\"0rem\"\n                bg=\"black\"\n              ></Box>\n            </Box>\n            <Box>\n              <UnorderedList fontSize={32}>\n                <Appear>\n                  <ListItem>Import various libraries/component</ListItem>\n                </Appear>\n                <Appear elementNum={0}>\n                  <ListItem>Create Hooks</ListItem>\n                </Appear>\n                <Appear elementNum={2}>\n                  <ListItem>\n                    The Hooks are used to create the Session App\n                  </ListItem>\n                </Appear>\n                <Appear elementNum={3}>\n                  <ListItem>Add the app to the Barchart component</ListItem>\n                </Appear>\n                <Appear elementNum={4}>\n                  <ListItem>\n                    Use the HamusJS Hooks to get the model, layout and to create\n                    a Picasso chart\n                  </ListItem>\n                </Appear>\n                <Appear elementNum={7}>\n                  <ListItem>UseEffect to wait for app and usePicasso</ListItem>\n                </Appear>\n              </UnorderedList>\n            </Box>\n          </Grid>\n        )}\n      </Stepper>\n    </Slide>\n    <Slide\n      transitionEffect=\"slide\"\n      backgroundColor={colors.lightbluegrey}\n      backgroundImage={image.pic}\n      backgroundOpacity=\"0.09\"\n    >\n      <Heading>Useful Links</Heading>\n      <UnorderedList fontSize={32}>\n        <ListItem>\n          <Link fontSize={32} margin={0} href=\"https://websy.academy/\">\n            Websy Academy\n          </Link>\n        </ListItem>\n        <ListItem>\n          <Link\n            fontSize={32}\n            margin={0}\n            href=\"https://github.com/qlik-oss/hamus.js/tree/master/example\"\n          >\n            HamusJS example\n          </Link>\n        </ListItem>\n        <ListItem>\n          <Link fontSize={32} margin={0} href=\"https://qlik.dev/\">\n            Developers Portal\n          </Link>\n        </ListItem>\n        <ListItem>\n          <Link\n            fontSize={32}\n            margin={0}\n            href=\"https://github.com/websy85/qlik-sso-enigmajs\"\n          >\n            Nick Webster JavaScript example\n          </Link>\n        </ListItem>\n      </UnorderedList>\n    </Slide>\n    <Slide\n      transitionEffect=\"slide\"\n      backgroundColor={colors.lightbluegrey}\n      backgroundImage={image.pic}\n      backgroundOpacity=\"0.09\"\n    >\n      <Heading>Exercise - use NodeJS to run these slides</Heading>\n      <Text>\n        <i>hint: npm start</i>\n      </Text>\n    </Slide>\n    <Slide\n      transitionEffect=\"slide\"\n      backgroundColor={colors.lightbluegrey}\n      backgroundImage={image.pic}\n      backgroundOpacity=\"0.09\"\n    >\n      <Heading>Thank you!</Heading>\n    </Slide>\n  </Deck>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}